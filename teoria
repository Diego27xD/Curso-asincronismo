JavaScript es síncrono y no bloqueante, con un bucle de eventos (concurrencia) implementado con ul único hilo para sus interfaces de I/O

JAVASCRIPT ES SINGLE-THREADED
Aún con múltiples procesadores, solo se puede ejecutar tareas en un solo hilo, llamado el hilo principal

JAVASCRIPT ES BLOQUEANTE
Una tarea no devuelve el control hasta que se ha completado

NO BLOQUEANTE
Una tarea devuelve inmediatamente con independencia del resultado. Si se completó, devuelve los datos. Si no, un error.

SÍNCRONO
Las tareas se ejecutan  de forma secuencial, de debe esperar a que se complete para continuar con la siguiente tarea.

ASÍNCRONISMO
Las tareas pueden ser realizadas más tarde, lo que hace posible que una respuesta sea procesada en diferido

CONCURRENCIA EN JAVASCRIPT
Utiliza un modelo de concurrencia basado en un "loop de evento"

EVENT LOOP
El bucle de eventos es un patrón de diseño que espera y distribuye eventos o mensajes en un programa

FORMAS DE MANEJAR LA ASINCRONÍA EN JAVASCRIPT
- CALLBACKS
Una funciòn que se pasa como argumento de otra función y que será invocada.
- PROMESAS (ES6)
Función no-bloqueante y asíncrona la cual puede retornar un valor ahora, en el futuro o nunca
- ASYNC / AWAIT (ES2017)
Permite estructurar una función asíncrona sin bloqueo de una manera similar a una función asíncrona ordinaria

JavaScript acaba de convertirse en Multi-Threaded con la capacidad de realizar múltiples tareas simultaneamente? SI y No, podemos hacer uso
de herramientas para hacerlo asíncrono, sin embargo, como tal es síncrono

JavaScript es: asíncrono y no bloqueante, con un bucle de evento (concurrencia) implementado con un único hilo para sus interfaces de I/O (entrada/salida)

#EVENT LOOP
- El bucle de eventos es un patrón de diseño que espera y distribuye eventos o mensajes en un programa.
- MEMORY HEAP
Los objetos son asignados a un montículo (espacio grande en memoria no organizado)
- CALL STACK
Apila de forma organizada las instrucciones de nuestro programa (PUSH y POP)
- TASK QUEUE
Cola de tareas, se maneja la concurrencia, se agregan las tareas que ya están listas para pasar al stack (pila)
El stack debe de estar vacío
- MICROTASK QUEUE
Las promesas tienen otra forma de ejecutarse y un prioridad superior.
- WEB APIs
JavaScript del lado del cliente: setTimeout, XMLHttpRequest, File Reader, DOM. 
Node: fs, https.
